╔════════════════════════════════════════════════════════════════════════════╗
║                   ANALYTICS PAGE - END-TO-END ARCHITECTURE                 ║
╚════════════════════════════════════════════════════════════════════════════╝

┌─────────────────────────────────────────────────────────────────────────────┐
│  USER INTERFACE (analytics.html)                                            │
├─────────────────────────────────────────────────────────────────────────────┤
│                                                                              │
│  ┌────────────────┐  ┌────────────────┐  ┌────────────────┐               │
│  │ Overview Cards │  │ Export Button  │  │ Refresh Button │               │
│  └────────────────┘  └────────────────┘  └────────────────┘               │
│         │                    │                    │                         │
│         ▼                    ▼                    ▼                         │
│  ┌──────────────────────────────────────────────────────────┐              │
│  │          JavaScript Functions & Event Handlers            │              │
│  │  - loadOverviewStats()     - exportAnalyticsData()       │              │
│  │  - loadCorrelationMatrix() - refreshAllCharts()          │              │
│  │  - loadComparisonChart()   - loadDynamicInsights()       │              │
│  │  - loadGrowthChart()       - loadCategoryChart()         │              │
│  └──────────────────────────────────────────────────────────┘              │
│                              │                                               │
└──────────────────────────────┼───────────────────────────────────────────────┘
                               │
                               │ HTTP Requests (fetch API)
                               ▼
┌─────────────────────────────────────────────────────────────────────────────┐
│  API LAYER (api_server.py)                                                  │
├─────────────────────────────────────────────────────────────────────────────┤
│                                                                              │
│  ┌─────────────────────┐  ┌─────────────────────┐  ┌──────────────────┐   │
│  │ /api/indicators     │  │ /api/correlation    │  │ /api/summary     │   │
│  │ Returns: List of    │  │ Returns: Matrix &   │  │ Returns: Stats   │   │
│  │ all indicators      │  │ indicator names     │  │ for all metrics  │   │
│  └─────────────────────┘  └─────────────────────┘  └──────────────────┘   │
│                                                                              │
│  ┌─────────────────────┐  ┌─────────────────────┐                          │
│  │ /api/data/<id>      │  │ /api/statistics/<id>│                          │
│  │ Returns: Time-series│  │ Returns: Detailed   │                          │
│  │ data for indicator  │  │ statistics          │                          │
│  └─────────────────────┘  └─────────────────────┘                          │
│                              │                                               │
└──────────────────────────────┼───────────────────────────────────────────────┘
                               │
                               ▼
┌─────────────────────────────────────────────────────────────────────────────┐
│  DATA PROCESSING LAYER (backend/data_processor.py)                          │
├─────────────────────────────────────────────────────────────────────────────┤
│                                                                              │
│  ┌─────────────────────────────────────────────────────────────┐           │
│  │ EconomicDataProcessor Class                                  │           │
│  │  - load_all_data()          - get_correlation_matrix()      │           │
│  │  - create_date_column()     - calculate_statistics()        │           │
│  │  - get_dataset()            - filter_by_date_range()        │           │
│  └─────────────────────────────────────────────────────────────┘           │
│                              │                                               │
└──────────────────────────────┼───────────────────────────────────────────────┘
                               │
                               ▼
┌─────────────────────────────────────────────────────────────────────────────┐
│  DATA STORAGE (CSV Files in /data)                                          │
├─────────────────────────────────────────────────────────────────────────────┤
│                                                                              │
│  📄 gdp_growth_rate.csv          📄 unemployment_rate.csv                   │
│  📄 consumer_price_index.csv     📄 forex_reserves.csv                      │
│  📄 gst_collections.csv          📄 iip.csv                                 │
│  📄 repo_rate.csv                📄 trade_balance.csv                       │
│  📄 financial_inclusion_index.csv 📄 digital_payment_volume.csv            │
│  📄 composite_leading_indicator.csv                                         │
│                                                                              │
└─────────────────────────────────────────────────────────────────────────────┘

═══════════════════════════════════════════════════════════════════════════════

DATA FLOW EXAMPLE: Loading Correlation Matrix

1. User opens analytics page
   ↓
2. DOMContentLoaded event fires
   ↓
3. loadCorrelationMatrix() called
   ↓
4. fetch('/api/correlation') → api_server.py
   ↓
5. processor.get_correlation_matrix() → data_processor.py
   ↓
6. Reads multiple CSV files, merges on date
   ↓
7. Calculates correlation using pandas.corr()
   ↓
8. Returns JSON: { indicators: [], matrix: [[]] }
   ↓
9. JavaScript receives data
   ↓
10. Generates HTML table with color coding
   ↓
11. Renders in #correlation-matrix div
   ↓
12. User sees interactive heatmap!

═══════════════════════════════════════════════════════════════════════════════

CHART TYPES USED:

┌─────────────────────────────────────────────────────────────────┐
│  Chart Type       │  Used For                                    │
├───────────────────┼──────────────────────────────────────────────┤
│  Line Chart       │  Multi-Indicator Comparison (normalized)     │
│  Horizontal Bar   │  Growth Trends (sorted by rate)              │
│  Doughnut Chart   │  Category Distribution                       │
│  Table/Heatmap    │  Correlation Matrix                          │
└─────────────────────────────────────────────────────────────────┘

═══════════════════════════════════════════════════════════════════════════════

KEY CALCULATIONS:

• Z-Score Normalization: z = (x - μ) / σ
  Where: x = value, μ = mean, σ = standard deviation

• Growth Rate: growth = ((latest - first) / first) × 100

• Correlation: Uses Pearson correlation coefficient
  Range: -1 (perfect negative) to +1 (perfect positive)

═══════════════════════════════════════════════════════════════════════════════

ERROR HANDLING FLOW:

API Error → try/catch → console.error() → User-friendly message → Graceful fallback

Examples:
- Server down → "Please ensure API server is running"
- No data → "N/A" displayed instead of crash
- Invalid response → Error message with retry option

═══════════════════════════════════════════════════════════════════════════════

PERFORMANCE OPTIMIZATIONS:

1. Parallel Loading: All API calls use Promise.all()
2. Chart Recycling: Always destroy before recreate
3. DOM Batch Updates: innerHTML for multiple elements
4. Lazy Evaluation: Charts update only when needed
5. Browser Caching: API responses cached by browser

═══════════════════════════════════════════════════════════════════════════════
